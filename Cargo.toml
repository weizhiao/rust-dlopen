[package]
name = "dlopen-rs"
version = "0.7.3"
edition = "2024"
rust-version = "1.85.0"
authors = ["wzhao <1207410841@qq.com>"]
readme = "README.md"
repository = "https://github.com/weizhiao/dlopen-rs"
keywords = ["dlopen", "elf", "unix", "loader"]
categories = ["no-std", "os", "embedded"]
license = "Apache-2.0"
description = "A dynamic linker fully implemented in Rust."
exclude = [".gitignore", "/example-dylib", "check.sh"]

[workspace]
members = ["example-dylib", "cdylib"]
resolver = "2"

[workspace.dependencies]
libc = { version = "0.2.169", default-features = false }

[dependencies.spin]
version = "0.10.0"
default-features = false
features = ["rwlock", "lazy", "mutex", "spin_mutex"]

[dependencies.unwinding]
version = "0.2.5"
default-features = false
features = ["fde-custom", "unwinder"]
optional = true

[dependencies.gimli]
version = "0.31"
default-features = false
features = ["read-core"]
optional = true

[dependencies.hashbrown]
version = '0.15.2'
default-features = false
features = ['inline-more']
optional = true

[dependencies.indexmap]
version = '2.9.0'

[dependencies.libc]
workspace = true
optional = true

[dependencies.phf]
version = '0.11'
default-features = false
features = ['macros']

[dependencies.elf_loader]
version = "=0.10.1"
default-features = false
features = ["use-libc", "log"]

[dependencies.dynamic-loader-cache]
version = "0.2.3"
optional = true

[dependencies.thread-register]
version = "0.1.1"
optional = true

[dependencies]
bitflags = "2.6.0"
cfg-if = '1.0'
log = "0.4.22"

[features]
default = ["mmap", "tls", "libgcc", "debug"]
# enable this when you want to use gdb/lldb to debug the loaded dynamic libraries
debug = ["std"]
# enable std
std = ["elf_loader/fs", "dep:dynamic-loader-cache"]
# enable default implementation on devices with mmapl storage
mmap = ["std", "elf_loader/mmap"]
# enable this when you need to use thread loca
tls = ["std", "dep:libc", "dep:thread-register"]
# activate specific versions of symbols for dynamic library loading
version = ["elf_loader/version"]
# enable this when you want to use the exception handling mechanism provided by dlopen-rs
unwinding = ["dep:unwinding", "dep:hashbrown"]
# enable this when program uses libgcc to handle exceptions
libgcc = ["dep:gimli"]
# enable this when program uses libunwind to handle exceptions
libunwind = ["dep:gimli"]
# see https://github.com/nbdd0121/unwinding/#unwinder
fde-phdr-dl = ["unwinding?/fde-phdr-dl"]
# see https://github.com/nbdd0121/unwinding/#baremetal
fde-static = ["unwinding?/fde-static"]
# see https://github.com/nbdd0121/unwinding/#baremetal
fde-gnu-eh-frame-hdr = ["unwinding?/fde-gnu-eh-frame-hdr"]

[dev-dependencies]
criterion = "0.5.1"
libloading = "0.8.5"
env_logger = "0.11.6"
libc = { workspace = true }

[[bench]]
name = "dlopen"
harness = false
required-features = ["mmap", "tls"]

[[bench]]
name = "dlopen_llvm"
harness = false
required-features = ["mmap", "tls"]

[[bench]]
name = "dlsym"
harness = false
required-features = ["mmap", "tls"]

[[bench]]
name = "dl_iterate_phdr"
harness = false
required-features = ["mmap", "tls"]

[[example]]
name = "manaul"
required-features = ["tls", "libgcc"]

[[example]]
name = "dlopen"
required-features = ["libgcc", "tls"]
